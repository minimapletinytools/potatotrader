::TODO::
-separate out some functions in market maker instead of using captures...
-test market maker D:
-add warning for low balance in arbitrage D: ?
-consider adding MonadLogger stuff
-actually use the account thing inside of Bilaxy.Query
-add account support to Chain.Query
-add test cases for all the chain query stuff D:
  DONE-merge testfixture branch
-come up with concrete rules for decimal conversion in bilaxy exchange when posting orders
  -I feel like I need a method for getting approx USD value of token
-test cases for flipExchange
-remove mock monads from Bilaxy.Query, instead make interface using exposed IO methods of the module (e.g. getDepth, getBalance, etc)
  -and do the same for Chain.Query
DONE-the way already sold and exect1 is not calculated right in both checkbuy and checksell
  -need to distinguish between a new sell order and a partially executed sell order
    -one way to fix this is to always put in a new sell order, but that won't handle the case where the cancel operation fails...
DONE-finish market maker
IGNORE-add flexible loss parameter
DONE-add license and make public on github
DONE-shuffle your balances around so you can arbitrage for real
DONE-market maker :O
DONE-rename ExchangeData to ExchangeData
DONE-rename ArbitrageParams
DONE-rename Trader to just Trader
DONE-add arbitrage parameters struct to arbitrage
  IGNORE-add min purchase amount threshold for arbitrage orders
    -64 TT was definitely too little...
DONE-add tracking of total profits in arbitrage D:
  -track starting balances so you can check your work when your done D:
DONE-add routine to actually check if orders got executed
  -add input/output amount to OrderState or whatever so you can get the amount traded
DONE-test arbitrage on USDT/TT instead
DONE-add routine that runs arbitrage every now and then
DONE-check that it actually worked ^
DONE-add < 0 bounds into arbitrage
DONE-add logging to arbitrage
DONE-force exchange rate on uniswap and see if that changes profit
DONE-add tx fees to Chain exchange
DONE-fix the order pricing issue in Bilaxy.Exchange (using avg price, not lowest/highest price)
  -it would actually be best if it submit several orders instead of 1 at the lowest/highest price for safety
DONE-test flipExchange
DONE-reorg to give everything a package name
DONE-Potato.Trading
DONE-check if bilaxy is actually using bilaxy tokens to pay for txfees
IGNORE-figure out if txfees are levied in first or second token on bilaxy
DONE- Create `data FlipExchange e = FlipExchange e`
  -I'm pretty sure this is doable, just don't mess up buy/sell differences and do proper conversion for ExchangeRate functions
IGNORE-add account abstracted version of some stuff in Chain and Bilaxy query (this is just in prep for using ExchangeAccount. We won't switch all the way over yet)
DONE-add monadic abstraction for some methods in chain and bilaxy query (also in preparation)
IGNORE-write tests to ascertain units and exchange rate stuff is done correctly
  -i.e. write test cases for make_buyt1 and make_sell1t
  -for chain tests you can query the uniswap contract (and a block number) and run locally with the same numbers to ensure result is the same :D

::FUTURE::
- accounts should not be read in IO monad. They should be passed in as an argument for each private exchange function (using data family for type)
- add mock interfaces for all IO monad calls for testing instead of actually querying exchanges...

:: TEST DATA ::
=====BEGIN ARBITRAGE ROUND=====
PROFITS: (0.125376 USDT,-2.2137e-2 USDT,627.772186 USDT,63.644697 USDT)
selling 627772186 tokens for 86889.59630238837 ether time 1579406979
"BEGIN ARBITRAGE: 2020-01-19 04:09:38.943648 UTC"
"BALANCES: (627.772186 USDT,99646.63457865437 TT,3918.020899 USDT,740646.18 TT)"
"RAN PROFIT USDT:TT:USDT ThunderCore mainnet to Bilaxy: (627.772186 USDT,91462.73294988248 TT,691.416883 USDT)"
"ACTUAL PROFIT: 63.644697 USDT"
"END ARBITRAGE: 2020-01-19 04:09:43.351741 UTC"
=====ORDER STATUS=====
OrderStatus {orderState = Executed, orderType = Sell, orderOrigAmount = (627.772186 USDT,91462.73294988248 TT), orderExecAmount = (627.772186 USDT,91462.73294988248 TT)}
OrderStatus {orderState = Executed, orderType = Buy, orderOrigAmount = (691.416883 USDT,91462.73294988248 TT), orderExecAmount = (690.54565 USDT,91463.0 TT)}
=====END ARBITRAGE ROUND=====
total profit is 63.644697 USDT


::1-14 8:00pm::
PROFITS: (0.116612 USDT,-5.79e-3 USDT,128.10924 USDT,2.07371 USDT)
selling 128109240 tokens for 17583.88261074895 ether time 1579061065
"querying (priv=False):\nRequest {\n  host                 = \"api.bilaxy.com\"\n  port                 = 443\n  secure               = True\n  requestHeaders       = []\n  path                 = \"/v1/depth\"\n  queryString          = \"?symbol=151&type=1\"\n  method               = \"GET\"\n  proxy                = Nothing\n  rawBody              = False\n  redirectCount        = 10\n  responseTimeout      = ResponseTimeoutDefault\n  requestVersion       = HTTP/1.1\n}\n"
"response status code: 200"
"querying (priv=True):\nRequest {\n  host                 = \"api.bilaxy.com\"\n  port                 = 443\n  secure               = True\n  requestHeaders       = []\n  path                 = \"/v1/trade\"\n  queryString          = \"?symbol=151&amount=18509&price=0.00704&type=sell&key=a9e9b435cb4184145ba78e134ac87a182&sign=3efa8db0928bf28d3e2ad6467e71aff345fa5ffd\"\n  method               = \"POST\"\n  proxy                = Nothing\n  rawBody              = False\n  redirectCount        = 10\n  responseTimeout      = ResponseTimeoutDefault\n  requestVersion       = HTTP/1.1\n}\n"
"response status code: 200"
"BEGIN ARBITRAGE: 2020-01-15 04:04:24.005426 UTC"
"BALANCES: (154.841058 USDT,55727.687871268834 TT,3644.179932 USDT,778315.18 TT)"
"RAN PROFIT t1:t2:t1 from e1 to e2: (128.10924 USDT,18509.350116577843 TT,130.18295 USDT)"
"ACTUAL PROFIT: 2.07371 USDT"
"END ARBITRAGE: 2020-01-15 04:04:30.592554 UTC"

::
PROFITS: (3615.35096736 TT,121.83380941650839 TT,2.375585212505494 TT,-0.11292051655954802 TT)
selling 26602618 tokens for 3550.3255379376833 ether time 1579156162
"BEGIN ARBITRAGE: 2020-01-16 06:29:22.405016 UTC"
"BALANCES: (74237.03789079668 TT,26.731818 USDT,760806.18 TT,3767.083292 USDT)"
"RAN PROFIT t1:t2:t1 from e2 to e1: (3615.35096736 TT,26.602618 USDT,3737.184776776509 TT)"
"ACTUAL PROFIT: 121.83380941650839 TT"
"END ARBITRAGE: 2020-01-16 06:29:27.713173 UTC"

::1-14 3:30pm::
"BEGIN ARBITRAGE: 2020-01-14 23:37:37.422751 UTC"
"BALANCES: (380013.7761272988,179.405858,762069.18,3753.612988)"
"RAN PROFIT t1:t2:t1 from e1 to e2: (15942.337936092443,109.435436,16163.474839169621)"
"ACTUAL PROFIT: 221.1369030771807"
"END ARBITRAGE: 2020-01-14 23:37:42.253013 UTC"

::1-14 12:30pm::
BALANCES: (49999.36966287978,294.748315,767769.18,3713.690188)
PROFITS: (5699.91839232,28.39995214106202,1.5999798292121528,-4.808982709917929e-2)
selling 39907257 tokens for 5441.902427238009 ether time 1579033624
"querying (priv=True):\nRequest {\n  host                 = \"api.bilaxy.com\"\n  port                 = 443\n  secure               = True\n  requestHeaders       = []\n  path                 = \"/v1/trade\"\n  queryString          = \"?symbol=151&amount=5700&price=0.00700&type=sell&key=a9e9b435cb4184145ba78e134ac87a182&sign=6f7558905eb4e8ca0f18b1d04ec4061584b782a5\"\n  method               = \"POST\"\n  proxy                = Nothing\n  rawBody              = False\n  redirectCount        = 10\n  responseTimeout      = ResponseTimeoutDefault\n  requestVersion       = HTTP/1.1\n}\n"
"response status code: 200"
t1:t2:t1 from e2 to e1: (5699.91839232,39.907257,5728.318344461063)

-TT: https://viewblock.io/thundercore/tx/0x7eb0151378ad3eaabe6e7f7045dbb42995593797f63e9090c8c72f599ab56164
-bilaxy: 01-14 12:27:08 	TT/USDT 	Sell 	0.00700000 	5700.00000000 	5700.00000000 	0.00700400 	39.92280000 	Success 	--
